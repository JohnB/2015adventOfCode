<!-- vim: syntax=markdown -->

# Day 15

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2015adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
require Integer

# Note: when making the next template, something like this works well:
#   `cat day01.livemd | sed 's/01/02/' > day02.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day15 do
  @parser ~r/(\w+): capacity (-?\d+), durability (-?\d+), flavor (-?\d+), texture (-?\d+), calories (-?\d+)/

  def parse_ingredients(text) do
    text
    |> AOC.as_single_lines()
    |> Enum.reduce(%{}, fn line, acc ->
      [[_, ingredient, capacity, durability, flavor, texture, calories]] = 
        Regex.scan(@parser, line)
      [capacity, durability, flavor, texture, calories] = Enum.map(
        [capacity, durability, flavor, texture, calories], &String.to_integer/1
      )
      Map.put(acc, ingredient, %{
        capacity: capacity, 
        durability: durability, 
        flavor: flavor, 
        texture: texture,
        calories: calories})
    end)
  end

  def solve1(text) do
    ingredients = parse_ingredients(text)
    |> IO.inspect(label: "ingredients")

    # example
    # %{"Butterscotch" => 44, "Cinnamon" => 56} 
    # puzzle input
    %{"Butterscotch" => 31, "Candy" => 29, "Frosting" => 24, "Sugar" => 16} # 
    # %{"Butterscotch" => 31, "Candy" => 29, "Frosting" => 24, "Sugar" => 16} # 18965440
    # %{"Butterscotch" => 30, "Candy" => 30, "Frosting" => 24, "Sugar" => 16} # 18957312
    # %{"Butterscotch" => 31, "Candy" => 28, "Frosting" => 24, "Sugar" => 17} # 18908760
    # %{"Butterscotch" => 31, "Candy" => 30, "Frosting" => 24, "Sugar" => 15} # 18895500
    # %{"Butterscotch" => 30, "Candy" => 31, "Frosting" => 24, "Sugar" => 15} # 18855540
    # %{"Butterscotch" => 32, "Candy" => 28, "Frosting" => 24, "Sugar" => 16} # 18841600
    # %{"Butterscotch" => 31, "Candy" => 31, "Frosting" => 23, "Sugar" => 15} # 18750180
    # %{"Butterscotch" => 29, "Candy" => 32, "Frosting" => 24, "Sugar" => 15} # 18684960
    |> Enum.map(fn {name, tsp} ->
      [tsp * ingredients[name].capacity, 
        tsp * ingredients[name].durability, 
        tsp * ingredients[name].flavor, 
        tsp * ingredients[name].texture, 
        tsp * ingredients[name].calories]
      |> IO.inspect(label: name)
    end)
    |> Enum.zip()
    |> Enum.map(fn tuple -> 
      Tuple.sum(tuple)
    end)
    |> Enum.reduce(1, fn sum, acc ->
      (acc * (max(0, sum) |> IO.inspect()))
    end)
  end

  def solve2(text) do
    ingredients = parse_ingredients(text)

    # example
    # %{"Butterscotch" => 44, "Cinnamon" => 56} 
    # puzzle input (calories)
    # %{"Butterscotch" => 26, "Candy" => 24, "Frosting" => 25, "Sugar" => 25 } # 498
      %{"Butterscotch" => 27, "Candy" => 25, "Frosting" => 24, "Sugar" => 24 } # 
    # %{"Butterscotch" => 27, "Candy" => 23, "Frosting" => 26, "Sugar" => 24 } # 500 (but 14902272 is too low)
    # %{"Butterscotch" => 27, "Candy" => 25, "Frosting" => 24, "Sugar" => 24 } # 506
    # %{"Butterscotch" => 26, "Candy" => 24, "Frosting" => 26, "Sugar" => 24 } # 502
    # %{"Butterscotch" => 27, "Candy" => 25, "Frosting" => 25, "Sugar" => 23} # 510
    # %{"Butterscotch" => 28, "Candy" => 26, "Frosting" => 25, "Sugar" => 21} # 522
    # %{"Butterscotch" => 29, "Candy" => 27, "Frosting" => 25, "Sugar" => 19} # 534
    # %{"Butterscotch" => 30, "Candy" => 28, "Frosting" => 25, "Sugar" => 17} # 546
    # %{"Butterscotch" => 31, "Candy" => 29, "Frosting" => 24, "Sugar" => 16} # 554
    |> Enum.map(fn {name, tsp} ->
      [tsp * ingredients[name].capacity, 
        tsp * ingredients[name].durability, 
        tsp * ingredients[name].flavor, 
        tsp * ingredients[name].texture, 
        tsp * ingredients[name].calories]
      |> IO.inspect(label: name)
    end)
    |> Enum.zip()
    |> Enum.map(fn tuple -> 
      Tuple.sum(tuple)
    end)
    |> IO.inspect(label: "with calories")
    # remove calories
    |> Enum.slice(0..-2//1)
    |> Enum.reduce(1, fn sum, acc ->
      (acc * (max(0, sum) |> IO.inspect()))
    end)
  end
end

# Example data:

# p1data.()
# |> Day15.solve1()
# |> IO.inspect(label: "\n*** Part 1 solution (example: 2)")
# 18965440 by trial and error

p1data.()
|> Day15.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 2)")
# 14902272 is too low

```
