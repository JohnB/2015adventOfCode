<!-- vim: syntax=markdown -->

# Day 19

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2015adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
require Integer

# Note: when making the next template, something like this works well:
#   `cat day01.livemd | sed 's/01/02/' > day02.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Solution

```elixir
defmodule Day19 do
  @replacement_parser ~r/(\w+) => (\w+)/

  def parse_replacements(text) do
    text
    |> AOC.as_single_lines()
    |> Enum.reduce( %{}, fn line, acc ->
      [[_, start, replacement]] = Regex.scan(@replacement_parser, line)
      
      {_, acc} = get_and_update_in(acc[start], fn current ->
        {current, (current || []) ++ [replacement]}
      end)
  
      acc
    end)
  end

  def enumerate_new_molecules(medicine, replacements) do
    # IO.inspect([medicine, replacements], label: "19")
    replacements
    |> Enum.reduce(%{}, fn {source, dests}, acc ->
      splits = String.split(medicine, source)
      num_splits = Enum.count(splits)
      # IO.inspect([source, num_splits, splits])
      
      dests
      |> Enum.reduce(acc, fn dest, acc1 ->
        [_left | rest] = Enum.with_index(splits)
        # rest = Enum.with_index(splits)

        rest
        # |> IO.inspect(label: "with_index after zero")
        |> Enum.reduce(acc1, fn {_split, index}, acc2 ->
          prefix = Enum.slice(splits, 0..(index - 1)//1)
            |> Enum.join(source)
          center = dest # only replace one section at a time
          ending = Enum.slice(splits, (index)..-1//1)
            |> Enum.join(source)
          new_molecule = [prefix, center, ending]
            |> Enum.join("")
          
          # IO.inspect([dest, [index, prefix, center, ending], new_molecule, acc2[new_molecule]], label: "42")

          {_, acc3} = get_and_update_in(acc2[new_molecule], fn current -> 
            {current, (current || 0) + 1} 
          end)
          
          acc3
          # |> IO.inspect(label: "49")
        end)
      end)
    end)
  end
  
  def solve1(text) do
    [replacements, medicine] = AOC.as_doublespaced_paragraphs(text)
    replacements = parse_replacements(replacements)
    molecules = enumerate_new_molecules(medicine, replacements)

    # IO.inspect([medicine, replacements])
    molecules
    |> Map.keys()
    |> Enum.count()
  end

  def solve2(text) do
    text
  end
end

# Example data:
# HOHOHO

p1data.()
|> Day19.solve1()
|> IO.inspect(label: "\n*** Part 1 solution (example: 7 for HOHOHO)")

# p1data.()
# |> Day19.solve2()
# |> IO.inspect(label: "\n*** Part 2 solution (example: 2)")
#

```
