<!-- vim: syntax=markdown -->

# Day 24

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2245adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day24 do
  @up "("
  @down ")"
  @up_moves ~r/\(/
  @down_moves ~r/\)/
  
  def count(text, regex) do
    regex
    |> Regex.scan(text)
    |> Enum.count()
  end
  
  def solve1(text) do
    0 + count(text, @up_moves) - count(text, @down_moves)
  end

  def solve2(text) do
    text
    |> String.split("", trim: true)
    |> Enum.reduce_while(%{position: 1, floor: 0}, fn char, acc -> 
      case [char, acc] do
        [@up, %{position: position, floor: floor}] -> 
          {:cont, %{position: position + 1, floor: floor + 1}} 
        [@down, %{position: position, floor: 0}] -> 
          {:halt, position} 
        [@down, %{position: position, floor: floor}] -> 
          {:cont, %{position: position + 1, floor: floor - 1}} 
      end
    end)
  end
end

# p1data.()
# |> Day24.solve1()
# |> IO.inspect(label: "\n*** Part 1 solution (example: -1)")
# 74

p1data.()
|> Day24.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 5)")
# 1795

```
