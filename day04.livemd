<!-- vim: syntax=markdown -->

# Day 04

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2015adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
require Integer

# Note: when making the next template, something like this works well:
#   `cat day01.livemd | sed 's/01/02/' > day02.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day04 do
  @mapwidth 10_000 # not quite infinite, but just add zeros
  @north "^"
  @south "v"
  @east ">"
  @west "<"
  @deltas %{@north => -@mapwidth, @south => @mapwidth, @east => 1, @west => -1}

  def split_positions(text) do
    String.split(text, "", trim: true)
  end

  def track_visited_houses(list) do
    list
    |> Enum.reduce(%{0 => 1, :position => 0}, fn direction, acc = %{position: position} ->
      new_position = position + @deltas[direction]
      new_position_count = acc[new_position] || 1
      
      acc
      |> Map.put(:position, new_position)
      |> Map.put(new_position, new_position_count)
    end)    
    |> Map.delete(:position)
  end
  
  def solve1(text) do
    text
    |> split_positions()
    |> track_visited_houses()
    |> Enum.count()
  end

  # there must be a better to partition [1,2,3,4] to [[1,3],[2,4]]
  def split_santa_from_robo_santa(list) do
    list
    |> Enum.with_index() 
    |> Enum.reduce([[],[]], fn {direction, index}, [left, right] -> 
      if Integer.is_even(index) do
        [[direction | left], right] 
      else 
        [left, [direction | right]] 
      end
    end)
    # Reverse them back to the original orderings
    |> Enum.map(&Enum.reverse/1)
  end

  def solve2(text) do
    [santa_directions, robo_santa_directions] =
      text
      |> split_positions()
      |> split_santa_from_robo_santa()

    santa_houses = track_visited_houses(santa_directions)
    robo_santa_houses = track_visited_houses(robo_santa_directions)

    Map.merge(santa_houses, robo_santa_houses)
    |> Enum.count()
  end
end

# p1data.()
# |> Day04.solve1()
# |> IO.inspect(label: "\n*** Part 1 solution (example: 2)")
# 2592

p1data.()
|> Day04.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 11)")
# 2360

```
