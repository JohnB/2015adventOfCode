<!-- vim: syntax=markdown -->

# Day 02

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])

IEx.Helpers.c("/Users/johnb/dev/2015adventOfCode/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input

# Note: when making the next template, something like this works well:
#   `cat day04.livemd | sed 's/03/04/' > day04.livemd`
#
```

## Installation and Data

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

```elixir
defmodule Day02 do
  @by "x"
  
  def dimensions(line) do
    [_length, _width, _height] = 
      line
      |> String.split(@by, trim: true)
      |> Enum.map(&String.to_integer/1)
  end
  
  def solve1(text) do
    text
    |> AOC.as_single_lines()
    |> Enum.map(&dimensions/1)
    |> Enum.map(&Enum.sort/1)
    |> Enum.map(fn [small, medium, large] -> 
      small * medium * 3 +
      small * large * 2 +
      medium * large * 2
    end)
    |> Enum.sum()
  end

  def solve2(text) do
    text
    |> AOC.as_single_lines()
    |> Enum.map(&dimensions/1)
    |> Enum.map(&Enum.sort/1)
    |> Enum.map(fn [small, medium, large] -> 
      small + medium + small + medium + 
        small * medium * large
    end)
    |> Enum.sum()
  end
end

# p1data.()
# |> Day02.solve1()
# |> IO.inspect(label: "\n*** Part 1 solution (example: 101)")
# 1586300

p1data.()
|> Day02.solve2()
|> IO.inspect(label: "\n*** Part 2 solution (example: 48)")
# 3737498

```
